  Map<Double,Integer> map;
    int count;
    public void helper(TreeNode root,double currSum, int targetSum){
        if(root==null)return;
        currSum += root.val;
        if(map.containsKey(currSum-targetSum))count+=map.get(currSum-targetSum);
        map.compute(currSum,(key,value) -> value == null ? 1 : value + 1);
        helper(root.left,currSum,targetSum);
        helper(root.right,currSum,targetSum);
        if(map.containsKey(currSum))map.put(currSum,map.get(currSum)-1);
    }
    public int pathSum(TreeNode root, int targetSum) {
        map = new HashMap<>();
        count = 0;
        map.put((double)0,1);
        helper(root,(double)0,targetSum);
        return count;
    }
